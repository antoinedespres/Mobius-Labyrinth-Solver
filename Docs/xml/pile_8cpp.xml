<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="pile_8cpp" kind="file" language="C++">
    <compoundname>pile.cpp</compoundname>
    <includes refid="pile_8h" local="yes">pile.h</includes>
    <incdepgraph>
      <node id="5">
        <label>case.h</label>
        <link refid="case_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cassert</label>
      </node>
      <node id="2">
        <label>pile.h</label>
        <link refid="pile_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>tableau2D.h</label>
        <link refid="tableau2_d_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/PJ_SDA/pile.cpp</label>
        <link refid="pile_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>vecteur3D.h</label>
        <link refid="vecteur3_d_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>item.h</label>
        <link refid="item_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="pile_8cpp_1a0f64868948f4ec25e25b900d78dc5b03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initialiser</definition>
        <argsstring>(unsigned int n, unsigned int p, Pile &amp;pile)</argsstring>
        <name>initialiser</name>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="struct_pile" kindref="compound">Pile</ref> &amp;</type>
          <declname>pile</declname>
        </param>
        <briefdescription>
<para>Initialiser une pile vide la pile est allouée en mémoire dynamique. </para>
        </briefdescription>
        <detaileddescription>
<para>Initialiser une pile vide la pile est allouÃ©e en mÃ©moire dynamique.</para>
<para><simplesect kind="see"><para><ref refid="pile_8h_1a2768c7cefd56136f83840228e374470b" kindref="member">detruire</ref> pour une désallocation en fin d&apos;utilisation </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>La capacité de la pile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p</parametername>
</parameternamelist>
<parameterdescription>
<para>Le pas d&apos;extension de la pile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pile</parametername>
</parameternamelist>
<parameterdescription>
<para>La pile à initialiser </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>n&gt;0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/PJ_SDA/pile.cpp" line="21" column="6" bodyfile="C:/PJ_SDA/pile.cpp" bodystart="21" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="pile_8cpp_1acb921a706453e114e6dc663b4a5324d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void empiler</definition>
        <argsstring>(const Vec3 &amp;it, Pile &amp;pile)</argsstring>
        <name>empiler</name>
        <param>
          <type>const <ref refid="struct_vec3" kindref="compound">Vec3</ref> &amp;</type>
          <declname>it</declname>
        </param>
        <param>
          <type><ref refid="struct_pile" kindref="compound">Pile</ref> &amp;</type>
          <declname>pile</declname>
        </param>
        <briefdescription>
<para>Empiler un item sur une pile. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">it</parametername>
</parameternamelist>
<parameterdescription>
<para>L&apos;item à empiler </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">pile</parametername>
</parameternamelist>
<parameterdescription>
<para>La pile </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/PJ_SDA/pile.cpp" line="33" column="6" bodyfile="C:/PJ_SDA/pile.cpp" bodystart="33" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="pile_8cpp_1a8b3b37884e20c6815951bc9408a5ee38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void depiler</definition>
        <argsstring>(Pile &amp;pile)</argsstring>
        <name>depiler</name>
        <param>
          <type><ref refid="struct_pile" kindref="compound">Pile</ref> &amp;</type>
          <declname>pile</declname>
        </param>
        <briefdescription>
<para>Dépiler l&apos;item au sommet de pile. </para>
        </briefdescription>
        <detaileddescription>
<para>DÃ©piler l&apos;item au sommet de pile.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">pile</parametername>
</parameternamelist>
<parameterdescription>
<para>La pile </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>la pile n&apos;est pas vide </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/PJ_SDA/pile.cpp" line="52" column="6" bodyfile="C:/PJ_SDA/pile.cpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="pile_8cpp_1ad9035b858b225127210378e9c5234861" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vec3" kindref="compound">Vec3</ref></type>
        <definition>Vec3 sommet</definition>
        <argsstring>(const Pile &amp;pile)</argsstring>
        <name>sommet</name>
        <param>
          <type>const <ref refid="struct_pile" kindref="compound">Pile</ref> &amp;</type>
          <declname>pile</declname>
        </param>
        <briefdescription>
<para>Lire l&apos;item au sommet de la pile. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pile</parametername>
</parameternamelist>
<parameterdescription>
<para>La pile </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>la valeur de l&apos;item au sommet de la pile </para>
</simplesect>
<simplesect kind="pre"><para>la pile n&apos;est pas vide </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/PJ_SDA/pile.cpp" line="63" column="6" bodyfile="C:/PJ_SDA/pile.cpp" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="pile_8cpp_1a2768c7cefd56136f83840228e374470b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void detruire</definition>
        <argsstring>(Pile &amp;pile)</argsstring>
        <name>detruire</name>
        <param>
          <type><ref refid="struct_pile" kindref="compound">Pile</ref> &amp;</type>
          <declname>pile</declname>
        </param>
        <briefdescription>
<para>Désallouer une pile. </para>
        </briefdescription>
        <detaileddescription>
<para>DÃ©sallouer une pile.</para>
<para><simplesect kind="see"><para><ref refid="pile_8h_1a0f64868948f4ec25e25b900d78dc5b03" kindref="member">initialiser</ref>, la pile a déjà été initialisée </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">pile</parametername>
</parameternamelist>
<parameterdescription>
<para>La pile à désallouer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/PJ_SDA/pile.cpp" line="73" column="6" bodyfile="C:/PJ_SDA/pile.cpp" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="pile_8cpp_1ae27db206e4e078b9ed06fab11258c867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool est_vide</definition>
        <argsstring>(const Pile &amp;pile)</argsstring>
        <name>est_vide</name>
        <param>
          <type>const <ref refid="struct_pile" kindref="compound">Pile</ref> &amp;</type>
          <declname>pile</declname>
        </param>
        <briefdescription>
<para>Test de pile vide. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pile</parametername>
</parameternamelist>
<parameterdescription>
<para>La pile </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true si p est vide, false sinon </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/PJ_SDA/pile.cpp" line="86" column="6" bodyfile="C:/PJ_SDA/pile.cpp" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="pile_8cpp_1ac8874fd7dfed5ba5bee5b9209157f39c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void afficher</definition>
        <argsstring>(const Pile &amp;pile)</argsstring>
        <name>afficher</name>
        <param>
          <type>const <ref refid="struct_pile" kindref="compound">Pile</ref> &amp;</type>
          <declname>pile</declname>
        </param>
        <briefdescription>
<para>Affichage des coordonnées du chemin selon la mise en forme prévue. </para>
        </briefdescription>
        <detaileddescription>
<para>Affichage des coordonnÃ©es du chemin selon la mise en forme prÃ©vue.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pile</parametername>
</parameternamelist>
<parameterdescription>
<para>La pile contenant les coordonnées </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/PJ_SDA/pile.cpp" line="94" column="6" bodyfile="C:/PJ_SDA/pile.cpp" bodystart="94" bodyend="100"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Composant <ref refid="struct_pile" kindref="compound">Pile</ref> Structures de données et algorithmes. </para>
    </briefdescription>
    <detaileddescription>
<para>Projet DesprésGr109NougaretGr109 <simplesect kind="author"><para>Antoine Després, Anicet Nougaret </para>
</simplesect>
<simplesect kind="version"><para>1 06/01/20 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="10"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pile_8h" kindref="compound">pile.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pile_8cpp_1a0f64868948f4ec25e25b900d78dc5b03" kindref="member">initialiser</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p,<sp/><ref refid="struct_pile" kindref="compound">Pile</ref>&amp;<sp/>pile)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>pile.pas<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>pile.nbEl<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>pile.cap<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>pile.tab<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_vec3" kindref="compound">Vec3</ref>[n];</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pile_8cpp_1acb921a706453e114e6dc663b4a5324d9" kindref="member">empiler</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vec3" kindref="compound">Vec3</ref>&amp;<sp/>it,<sp/><ref refid="struct_pile" kindref="compound">Pile</ref>&amp;<sp/>pile)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pile.nbEl<sp/>&gt;=<sp/>pile.cap)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vec3" kindref="compound">Vec3</ref>*<sp/>nouv_tab<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_vec3" kindref="compound">Vec3</ref>[pile.cap+pile.pas];</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>pile.nbEl;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nouv_tab[i]<sp/>=<sp/>pile.tab[i];</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>pile.tab;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pile.tab<sp/>=<sp/>nouv_tab;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pile.cap<sp/>+=<sp/>pile.pas;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>pile.nbEl++;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>pile.tab[pile.nbEl<sp/>-<sp/>1]<sp/>=<sp/>it;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pile_8cpp_1a8b3b37884e20c6815951bc9408a5ee38" kindref="member">depiler</ref>(<ref refid="struct_pile" kindref="compound">Pile</ref>&amp;<sp/>pile)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(pile.nbEl<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>pile.nbEl--;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><ref refid="struct_vec3" kindref="compound">Vec3</ref><sp/><ref refid="pile_8cpp_1ad9035b858b225127210378e9c5234861" kindref="member">sommet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_pile" kindref="compound">Pile</ref>&amp;<sp/>pile)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(pile.nbEl<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pile.tab[pile.nbEl<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pile_8cpp_1a2768c7cefd56136f83840228e374470b" kindref="member">detruire</ref>(<ref refid="struct_pile" kindref="compound">Pile</ref>&amp;<sp/>pile)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>pile.tab;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>pile.tab<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>pile.cap<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>pile.nbEl<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>pile.pas<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="pile_8cpp_1ae27db206e4e078b9ed06fab11258c867" kindref="member">est_vide</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_pile" kindref="compound">Pile</ref>&amp;<sp/>pile)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pile.nbEl<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pile_8cpp_1ac8874fd7dfed5ba5bee5b9209157f39c" kindref="member">afficher</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_pile" kindref="compound">Pile</ref>&amp;<sp/>pile)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>pile.nbEl;<sp/>i<sp/>&gt;<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pile_8cpp_1ac8874fd7dfed5ba5bee5b9209157f39c" kindref="member">afficher</ref>(pile.tab[i-1]);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/PJ_SDA/pile.cpp"/>
  </compounddef>
</doxygen>
